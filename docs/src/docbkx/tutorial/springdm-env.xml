<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
  <chapter>
    <title>Prepare Eclipse/Spring-DM environment</title>
    
    <para>
    In this section we will create, configure and test Eclipse based Spring-DM Target Platform. 
First it is worth to mention that Spring-DM Target Platform comes with the distribution of Sring-IDE and 
 <ulink url="http://static.springframework.org/osgi/docs/current/reference/html/appendix-pde-integration.html">Appendix C</ulink> 
 of Spring-DM Reference Manual provides details on how to configure Spring-DM Target Platform within the Eclipse PDE using Spring-IDE. 
</para>
<para>
SpringSource Tool Suite (STS) also comes with pre-configured Spring-DM Target Platform as well as set of Eclipse based 
Task Driven tutorials on how to configure and develop basic Spring-DM based projects. 
</para>
<para>
One of the goals of this tutorial is to showcase one of the main concepts behind OSGi™ where every platform could be 
customized and modified rather easily to fit whatever needs you might have, where the concept of dependancy on configuration provided by the vendor is obsolete. 
In the case of this tutorial we are going to develop several applications. One of them is Spring MVC based application 
which requires our target Platform to be <emphasis>web-capable</emphasis> which means it requires bundles responsible for 
such functionality (e.g., Tomcat, Servlet API etc.)to be installed in the Target Platform, which is exactly what we are going to do in this section. 
It will also help use to prepare ourselves for future tasks related to customization of our OSGi™ environment, as we might 
need to deal with upgrades and changes. 
</para>
<para>
<ulink url="http://www.springsource.com/repository/app/;jsessionid=CE7C7CC99453B5DD2F136B0B6334BE76">SpringSource OSGi™ repository</ulink> already contains 
OSGified bundles that could be used to customize your OSGi™ environment and it’s only growing.  
Knowing how to do it is paramount.
</para>
<para>
We need to perform the following steps to configure our Spring-DM target Platform and prepare our environment for development tasks.
<itemizedlist>
			<listitem><para>Create Project Structure to host Target Platform</para></listitem>
			<listitem><para>Define and execute Spring-DM Maven Configuration</para></listitem>
			<listitem><para>Test target Platform</para></listitem>
		    <listitem><para>Define User Library (Class Path)</para></listitem>
</itemizedlist>
</para>

    <section id="tutorial:prerequisite">
	    <title>Prerequisite</title>
	    <para>
	    In order to complete this tutorial make sure the following is installed and available:
		<itemizedlist>
			<listitem><para>Eclipse 3.2+</para></listitem>
			<listitem><para>Latest Spring-DM distribution</para></listitem>
			<listitem><para>Eclipse Spring IDE installed (<ulink url="http://springide.org/project/wiki/SpringideInstall">Spring IDE installation page</ulink>)</para></listitem>
		    <listitem><para>JDK 1.5+</para></listitem>
		    <listitem><para>Maven 2.0.7+</para></listitem>	    
		</itemizedlist>
		Also, make sure your computer is connected to the internet (for Maven dependencies) 
	    </para>
    </section>
    
    <section id="tutorial:cr-tp-structure">
    	<title>Create Project Structure to host Target Platform</title>    
    
<para>
In this section we will create and configure an empty project to be the host of our target platform. 
Doing it this way is convenient because we’ll be able to access our Target platform right from our workspace.
</para>
<para>On the menu Click on: <command>File -> New -> Project</command> </para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/new-generic-project.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/new-generic-project.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
New project wizard will open up
</para>
<para>
Select <command> General -> Project </command>and name it <emphasis>Spring-DM-Target-Platform</emphasis>
</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/springdm-tp-project.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/springdm-tp-project.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
Next, Create new Folder in this project and call it <literal>target</literal>. 
When done you should have the following structure.
</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/springdm-tp-project1.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/springdm-tp-project1.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
Now we need to configure our newly created <literal>target</literal> directory to be the root for our Target Platform
</para>
<para>
On the Eclipse menu bar click on: <command>Window -> Preferences</command>
</para>
<para>
Expend <command>Plug-in Development -> Target Platform</command>
</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/springdm-tp.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/springdm-tp.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
In the <emphasis>Location</emphasis> field (at the top of the window), enter or browse to the absolute location of the <literal>target</literal> directory we’ve created earlier
</para>
<para>
Click on: <command>Reload</command>
</para>
<para>
You should see that our target platform is empty and it should be, since we don’t have a single bundle in it.
</para>
<para>
Click <command>OK</command>. 
</para>
<para>
Now all we need to do is to install bundles which will define our target platform. We can obviously download and install these bundles manually
(a very tedious process), so to make this process simpler and more consistent we’ll use Maven to do it for us.
Copy the Maven <literal>pom.xml</literal> file to the root of your project. This file is located in <literal>samples/eclipse-samples/Spring-DM-Target-Platform</literal> directory of Spring-DM distribution
</para>
<para>
You should see the following structure:
</para>

<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/pom-xml.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/pom-xml.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
You are ready for the next step.
</para>
    </section>
    
    <section id="tutorial:maven-config">
	    <title>Configure Maven using External Tools</title>    
	    <para>
	    In this section we are going to configure Maven to assist us with creation of our custom web-enabled Spring-DM Target Platform.
	    What this mean is that we are going to use Maven to download all required bundles and install them in the <literal>target</literal>
	    directory which is already defined as the root for our target platform. Besides regular Spring-DM bundles we are going to download and install 
	    OSAGified version of Tomcat and it's dependencies.
	    </para>
	    <para>
	    There are few Maven Eclipse plug-ins available which you can use at your will, 
	    however in order to keep this tutorial as much independent from any particular IDE as we can (even though it is based on Eclipse),
	     we are not going to use any of the Maven Eclipse plug-ins. Instead we will use 
	    <emphasis>External Tools Configuration</emphasis> feature provided by Eclipse to simply point to your Maven installation 
	    (as if it was any other batch program). This way if someone prefers to execute Maven commands 
	    from the command shell, such switch would not be difficult to make.    
	   </para>
	   <para>
	   Click on: <command> External Tools (down arrow)-> Open External Tools</command> 
	   </para>
	
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/maven-config1.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/maven-config1.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>   
	   
<para>
<emphasis>External Tools</emphasis> window will open up.
</para>
 
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/maven-config2.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/maven-config2.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>

<para>
Right click on the <command> Program -> New</command>
</para>
<para>
<emphasis>Manage Configurations</emphasis> window will open up
</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/maven-config3.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/maven-config3.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
Enter the following in the corresponding fields:
</para>
<para><emphasis>Name:</emphasis><literal> Create-SpringDM-Target-Platform</literal></para>
<para><emphasis>Location:</emphasis> Browse to the location of your Maven installation and point to <literal>mvn.bat</literal> file</para>
<para><emphasis>Working Directory:</emphasis> Browse Workspace and point to the root of our <emphasis>Spring-M-Target-Platform</emphasis> project</para>
<para><emphasis>Arguments:</emphasis><literal> package</literal></para>
 
<para>Click: <command> Apply -> Run</command></para>

<para>
This will run Maven configuration which will download and copy all the bundles into our <literal>target</literal> directory. 
Time for this step depends on how much bundles and their dependencies you have in your local Maven repository. 
</para>
<para>
Once completed you should see successful Maven build:
</para>
<para>
	<programlisting language="xml"><![CDATA[
. . . . . . . . . .
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
. . . . . . . . . .
	]]></programlisting>        
</para>
<para>
Right click on the <literal>target</literal> directory and select <command>Refresh</command>
</para>
<para>
You should see all the bundles there:
</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/target-tp.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/target-tp.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
On the Eclipse menu bar select: <command>Window -> Preferences</command>
</para> 
<para>
Expend: <command>Plug-in Development -> Target Platform </command>(as we did few steps before) and click on <command>Reload</command>.
</para> 
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/target-tp1.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/target-tp1.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
You should see that or target platform was populated with downloaded bundles.
</para>
<para>Click <command>OK</command></para>
<para>You are ready for the next step</para>
    </section>
        
    <section id="tutorial:test-tp">
        <title>Test Spring-DM target Platform</title>

<para>
In this section we’ll create Launch Configuration for our newly created Target Platform and test it by starting it.
</para>
<para>Click on: <command> Run-Dialog (down arrow)-> Open Run Dialog</command></para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/launch1.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/launch1.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
 
<para>
<emphasis>New Launch</emphasis> configuration window will open up
</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/launch2.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/launch2.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
Right click on <command>OSGi Framework -> New </command>and enter <literal>Spring-DM-TP</literal> in the <emphasis>Name</emphasis> field:
</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/launch3.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/launch3.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
Make sure <emphasis>Target Platform</emphasis> is selected
</para>
 
<para>Click: <command>Apply</command> (to save configuration for future use) <command>-> Run</command></para>

<para>You should see the following output in your console:</para>
<para>
	<programlisting language="xml"><![CDATA[
osgi> log4j:WARN No appenders could be found for logger (org.springframework.osgi.web.tomcat.internal.Activator).
log4j:WARN Please initialize the log4j system properly.
	]]></programlisting>        
</para>

<para>
Your Target Platform platform started successfully. (We’ll fix the Log4J warning message later)
</para>

<para>
Type <literal>ss</literal> (short status) in the console and you should see that all bundles (except for org.springframework.bundle.osgi.test) are in the ACTIVE state.
</para>
<para>
	<programlisting language="xml"><![CDATA[
osgi> log4j:WARN No appenders could be found for logger (org.springframework.osgi.web.tomcat.internal.Activator).
log4j:WARN Please initialize the log4j system properly.
ss

Framework is launched.

id	State       Bundle
0	ACTIVE      system.bundle_3.2.2.R32x_v20070118
1	ACTIVE      org.springframework.bundle.spring.context.support_2.5.5
2	ACTIVE      com.springsource.junit_3.8.2
3	ACTIVE      jcl104.over.slf4j_1.4.3
4	ACTIVE      org.springframework.osgi.jasper.osgi_5.5.23.SNAPSHOT
5	ACTIVE      org.springframework.bundle.spring.beans_2.5.5
6	ACTIVE      org.springframework.osgi.commons-el.osgi_1.0.0.SNAPSHOT
7	ACTIVE      org.springframework.osgi.catalina.start.osgi_1.0.0.SNAPSHOT
8	ACTIVE      org.springframework.bundle.osgi.io_1.1.0.rc1
. . . . . . . . . . .
	]]></programlisting>        
</para>

<para>
That is it for now. We can shut down our Target Platform.
</para>

    </section>
  
    <section id="tutorial:spring-dm-library">
    	<title>Create Spring-DM User Library</title>
 
<para>
One last step we should perform is to prepare Sring-DM library for our class path to be conveniently exported when developing 
projects against our Target Platform. We can of course define required JARs manually, but it would be simpler and more elegant if we 
were to expose our Target Platform as <emphasis>User Library</emphasis> configured via Eclipse.
</para>   	
<para>
To do that on the Eclipse menu bar select <command>Window -> Preferences</command>
</para>   
<para>
When <emphasis> Preferences</emphasis> window will open up, expend <command>Java -> Build Path -> User Libraries</command>
</para>    
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/ulib1.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/ulib1.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
Click on <command>New</command> (Right top corner)
</para>

<para>When <emphasis>New User Library</emphasis> window opens up enter <literal>SPRING_DM_1.1</literal> in <emphasis>User Library name:</emphasis></para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/ulib2.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/ulib2.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
Click <command>OK</command>
</para>

<para>
Now we are ready to add our bundles (JARs) to this library
</para>

<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/ulib3.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/ulib3.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
Click on <command>Add JARs</command> and browse to the <literal>target</literal> directory we created earlier. When there select all JARs
</para>

<para>
You should see that all JARs were imported into our library:
</para>

<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/ulib4.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/ulib4.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
 
<para>
Click <command>OK</command>
</para>
<para>
We’re done. Our Spring-DM library was created and ready to be used to develop Spring-DM projects.
</para>

    </section>
  </chapter>