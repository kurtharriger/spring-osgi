<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
  <chapter>
    <title>Implement Simple Spring-DM Service</title>
    <para>In this chapter we will implement our first Spring-DM service.</para>
   
    <section id="tutorial:cr-java-project">
    	<title>Create Spring-DM service</title>   
 
<para>Before we create our first Spring-DM project let's define a use case for it</para>
<para>
Our project will consist of a simple service which will define a method that accepts a String and returns it back in reverse order. 
We will also export this service as an OSGi™ service, so later on when we develop Spring-DM web-based project we will be able to reference this service
as plain OSGi™ service using features of Spring-DM.
</para>

<para>Create Java Project</para>
<para>Click on: <command> File -> New -> Java Project</command></para>
<para>
<emphasis>New Java Project</emphasis> window will open up:
</para> 
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/project/simple1.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/project/simple1.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>
Enter <literal>org.springframework.osgi.simple</literal> as <emphasis>Project Name</emphasis> and click on <command>Next</command>. 
</para>
<para>
Now, we are going to add the Spring-DM Library we created earlier to the project class path.
</para>
<para>Click on: <command>Add Library</command> and select <command> User Library</command></para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/project/simple2.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/project/simple2.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>Select <emphasis>SPRING_DM_1.1</emphasis></para>

<para>Click <command>Finish -> Finish</command></para>
<para>Your project should look like this:</para>

<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/project/simple4.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/project/simple4.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
<para>Remember this procedure since you might want to reuse it while creating other projects.</para>
    	
	</section> 
	
	<section id="tutorial:impl-project">
		<title>Implement Spring-DM service</title>
<para>Create the following Java Artifacts:</para>		
<para><emphasis>StringReverser.java</emphasis> – service interface:</para>

<para>
	<programlisting language="java"><![CDATA[
package org.springframework.osgi.sample.service;

public interface StringReverser {

	public String reverse(String str);
}
	]]></programlisting>        
</para>

<para><emphasis>StringReverserImpl.java</emphasis> – service implementation:</para>
<para>
	<programlisting language="java"><![CDATA[
package org.springframework.osgi.sample.service.impl;

import org.apache.log4j.Logger;
import org.springframework.osgi.service.StringReverser;

public class StringReverserImpl implements StringReverser {
	private static Logger logger = Logger.getLogger(StringReverserImpl.class);

	@Override
	public String reverse(String str) {
		logger.info("Receiveing string: " + str);
		char[] chars = str.toCharArray();
		StringBuffer buf = new StringBuffer();
		
		for (int i = chars.length - 1, x = 0; i >= 0; i--, x++) {
			buf.append(chars[i]);			
		}
		String reveresed = buf.toString();
		logger.info("Reterning string: " + reveresed);
		return reveresed;	
	}
}
	]]></programlisting>        
</para>
<para>This is it. As you can see, it is a very simple POJO based service.</para>		

<para>Your project should look like this:</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/project/simple4a.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/project/simple4a.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
	</section>
	
	<section id="tutorial:config-project">
		<title>Configure Spring-DM servie</title>
<para>
In order for this project to be recognized as an OSGi™ project it should have <literal>MANIFEST</literal> file. 
We could have created this project originally as Eclipse PDE project (similar to the way we did Log4J project) and <literal>MANIFEST</literal> 
would be created for us automatically; however for the purposes of learning experience we are going to define it manually. 
It will also allow us not to be coupled completely to the environment provided by the 
Eclipse PDE (just use it enough to help us out)
</para>

<para>Create <literal>META-INF</literal> directory at the root of the project </para>

<para>Create <literal>MANIFEST.MF</literal> file inside of <literal>META-INF</literal> directory (i.e., <literal>META-INF/MANIFEST.MF</literal>) </para>

<para>
Copy the following contents into <literal>MANIFEST</literal> file:
</para>
<para>

	<programlisting language="xml"><![CDATA[
Manifest-Version: 1.0
Bundle-Version: 1.0
Bundle-SymbolicName: org.springframework.osgi.simple.reverser
Bundle-Name: Simple String Reverser Bundle
Bundle-Vendor: Spring Framework
Bundle-ManifestVersion: 2
Export-Package: org.springframework.osgi.sample.service
Import-Package: org.apache.log4j;version="1.2.15"
	]]></programlisting>        
</para>
<para>
As you see, we are exporting the package which contains our service definition (interface). 
We are also importing log4j package, as we depend on it within our code.

</para>
<para>Now we have enough for Equinox (our OSGi platform) to recognize our project as valid OSGi bundle. </para>

<para>However few things are still missing. . .</para>

<para>
For our project being Spring based project, we have yet to define our Application Context and its configuration. 
We can obviously define it anywhere, but then we would have to let Spring DM Extender know where the configuration files 
located. <ulink url="http://static.springframework.org/osgi/docs/1.0.2/reference/html/app-deploy.html#app-deploy:headers">Chapter 4.1. Bundle format and Manifest headers</ulink>  
explains in details how to do that (extra MANIFEST headers). But for the purposes of this tutorial we are going 
rely on default location specified and expected by Spring DM. This way Spring DM Extender bundle will be able to find 
our Application Context configuration , bootstrap it (similar to the way ContextLoaderListener does in web environment) 
and export our service as OSGi™ service into our Target Platform without any extra MANIFEST headers.
</para>
<para>

Create <literal>spring</literal> directory inside of <literal>META-INF</literal> directory. 
This is the default directory where Spring DM Extender bundle will look for Spring configurations.

</para>
<para>Create <literal>simpleservice.xml</literal> file and copy the following contents into the file:</para>

<para>

	<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean name="stringReverser"
		class="org.springframework.osgi.sample.service.impl.StringReverserImpl"/>
</beans>
	]]></programlisting>        
</para>
<para>This file configures our service as a regular Spring bean</para>

<para>Create <literal>simpleservice-osgi.xml</literal> file and copy the following contents into the file:</para>

<para>

	<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgi="http://www.springframework.org/schema/osgi"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
                      http://www.springframework.org/schema/osgi 
                      http://www.springframework.org/schema/osgi/spring-osgi.xsd">

	<osgi:service id="stringReverserOsgi" ref="stringReverser"
		interface="org.springframework.osgi.sample.service.StringReverser" />
</beans>
	]]></programlisting>        
</para>
<para>
This file uses <literal>osgi</literal> name space to provide a directive for Spring DM’s Extender bundle to export 
our service and publish it under the interface it implements.

</para>

<para>This is it. Your <literal>META-INF</literal> directory should look like this:</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/project/simple6.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/project/simple6.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
 
 <para>
 The only thing that is left to do is to package our bundle. However, one nice thing about Eclipse PDE environment 
 is the fact that it recognizes this project as valid OSGi™ bundle project simply because it has valid OSGi™ 
 <literal>META-INF/MANIFEST.MF</literal> file at the root of the project (see below)
 
 </para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/project/simple5.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/project/simple5.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>

<para>
And even though we will need to package it later on to do the integration testing, we don’t have to do it just yet.

</para>	
		
	</section>
	
	<section id="tutorial:deploy-service">
	<title>Deploy Spring-DM Service</title>
	
<para>To deploy our Spring DM powered bundle simply start the OSGi environment and you’ll see that the bundle is deployed.</para>	
	
<para>If you enable Eclipse PDE tracing (debug/services)you can easily find the following message in the console:</para>	
	
<para>

	<programlisting language="xml"><![CDATA[
. . . . . . .
registerService[initial@reference:file:../../org.sprigframework.osgi.simple/ [18]]
	({org.springframework.osgi.sample.service.StringReverser}=
	{org.springframework.osgi.bean.name=stringReverser, 
	Bundle-SymbolicName=org.springframework.osgi.simple.reverser, 
	Bundle-Version=1.0, service.id=27})
. . . . . . .
	]]></programlisting>        
</para>	
	 
<para>There you can clearly see that our service was exported successfully into OSGi environment. </para>

</section>

<section id="tutorial:package-service">
<title>Package Spring-DM Service</title>
<para>
To package our project you simply need to <literal>jar</literal> it. Eclipse can help us with that as well.
</para>
<para>Right click on the project <command> -> Export</command></para>
<para>When <emphasis>Export</emphasis> window opens up expend <command>Java</command> and select <command>JAR file</command></para>

<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/project/simple7.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/project/simple7.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>
 <para>Click <command>Next</command></para>
<important>
On the next window make sure you select all the option you see on the screen shot below. 
And select the location to where you want the JAR file to be exported (e.g., I choose the root of the project itself). 
Name it: <literal>reverser.jar</literal> 
</important>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/project/simple8.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/project/simple8.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>

<para>Click <command>Next -> Next</command></para>

<para>On the next window select <command>Use existing manifest from workspace</command>. We don’t want the generated one.</para>
<para>
		    	<mediaobject>
		            <imageobject role="fo">
		              <imagedata align="center"
		                         fileref="../src/docbkx/resources/images/tutorial/project/simple9.jpg"
		                         format="JPG"/>
		            </imageobject>
		
		            <imageobject role="html">
		              <imagedata align="center" fileref="images/tutorial/project/simple9.jpg"
		                         format="JPG"/>
		            </imageobject>
		          </mediaobject>        
</para>

<para>Click on <command>Finish</command> (ignore the warning message if present)</para>

<para>Verify that the JAR file was generated. You can also peek inside and study its structure.</para>

<para>Our project is complete and packaged as valid Spring DM/OSGi bundle. </para>
	
	</section>
	
  </chapter>