<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<appendix id="appendix-roadmap">
	<title>Roadmap</title>

	<para>
		This appendix documents features on the Spring Dynamic Modules
		roadmap. The design of these features specified here is subject
		to change. As a most up to date source, please see
		<ulink url="http://jira.springframework.org/browse/OSGI">
			our
		</ulink>
		issue tracker.
	</para>

    <section>
      <title>Access to Service References for Collections</title>

      <para>The current specification does not provide for access to the
      <literal>ServiceReference</literal> objects for services in a managed
      collection (i.e. obtained via a <literal>set</literal> or
      <literal>list</literal> declaration). A future release of Spring Dynamic
      Modules will provide an easy means of gaining access to these
      references.</para>
    </section>

    <section>
      <title>Start level integration</title>

      <para>A future release of Spring Dynamic Modules may offer the following
      additional guarantee with respect to application context creation and
      start levels:</para>

      <para>Application context creation happens asynchronously. However, the
      extender bundle does guarantee that the creation of all application
      contexts for bundles at start level <literal>n</literal> will be
      complete before the creation of any application context at start level
      <literal>m</literal>, where <literal>m > n</literal>. Care must
      therefore be taken not to introduce any mandatory dependencies on
      services exported by bundles with higher start levels or a deadlock will
      be introduced.</para>

      <para>In a similar vein, when shutting down the extender bundle,
      application contexts at start level <literal>m</literal> will be shut
      down before application contexts at start level <literal>n</literal>,
      where <literal>m > n</literal>.</para>
    </section>

    <section>
      <title>Web library integration</title>

      <para>While support for generic and Spring-MVC web applications is available in 1.1.0,
      in the future we'd like to provide integration (if needed) with other popular web libraries 
      (such as JSF and Spring Web Flow) in the upcoming releases.</para>
    </section>

    <section>
      <title>ORM/Persistence support</title>

      <para>Care needs to be taken when using JPA or Hibernate under OSGi as
      the persistence engines must have visibility of the persistent types and
      mapping files. The Spring Dynamic Modules project will be investigating
      an extension model to make managing this easier when persistent
      configuration is split across several bundles. See Peter Krien's <ulink
      url="http://www.osgi.org/blog/2007/06/osgi-and-hibernate.html">blog
      entry</ulink> on the topic for an insight into the issues.</para>
      <para>Also, the project aims to simplify deployment of JDBC drivers and
      pooling libraries that at the moment require special <literal>DynamicImport-Package</literal>.</para>
    </section>

	<section>
	  <title>OSGi standards</title>
	
	  <para>While OSGi 4.0 is currently required, work is underway to take advantage of the
	  new features available in 4.1. SpringSource is an active participant in the 
	  <ulink url="http://www2.osgi.org/EEG/HomePage">OSGi Enterprise Expert Group</ulink> 
	  and we hope to help many of the ideas found in the Spring Dynamic Modules project 
	  to make their way into the OSGi R5 specification.
	  Spring Dynamic Modules would obviously seek to support any such standards at that 
	  point in time.</para>
	</section>
    
</appendix>
