<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

  <appendix id="appendix-compendium">
    <title>Compendium Services</title>

    <para>The OSGi Service Platform Service Compendium specification defines a
    number of additional services that may be supported by OSGi
    implementations. Spring Dynamic Modules supports an additional
    "compendium" namespace that provides support for some of these services.
    By convention, the prefix <literal>osgix</literal> is used for this
    namespace.</para>

    <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/osgi"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xsi:schemaLocation="http://www.springframework.org/schema/osgi  
        http://www.springframework.org/schema/osgi/spring-osgi.xsd
        http://www.springframework.org/schema/osgi-compendium
        http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans.xsd">

   <!-- use the OSGi namespace elements directly -->
   <service id="simpleServiceOsgi" ref="simpleService"
       interface="org.xyz.MyService" />

   <!-- qualify compendium namespace elements -->
   <osgix:property-placeholder persistent-id="com.xyz.myapp"/>

</beans:beans>]]></programlisting>

    <para>At present this namespace provides support for the Configuration
    Admin service. Support for other compendium services may be added in
    future releases.</para>

    <section id="compendium:cm">
      <title> Configuration Admin</title>

      <section id="compendium:cm:ppc">
        <title>Property placeholder support</title>

		<sidebar>
		  <title>Future directions</title>
		  <para>Please note that in future releases, the property-placeholder
		  element will be changed to be properly align with Spring Framework
		  classes and namespace. That is, rather then provide a Spring-DM
		  specific declaration, the <emphasis>traditional</emphasis> Spring
		  Framework declaration can be used.
		  </para>
		</sidebar>
		
        <para>Spring Dynamic Modules provides support for sourcing bean
        property values from the OSGi Configuration Administration service.
        This support is enabled via the
        <literal>property-placeholder</literal> element. The property
        placeholder element provides for replacement of delimited string
        values (placeholders) in bean property expressions with values sourced
        from the configuration administration service. The required
        <literal>persistent-id</literal> attribute specifies the persistent
        identifier to be used as the key for the configuration dictionary. The
        default delimiter for placeholder strings is "${...}".</para>

        <para>Given the declarations:</para>

        <programlisting><![CDATA[<osgix:property-placeholder persistent-id="com.xyz.myapp"/>

<bean id="someBean" class="AClass">
  <property name="timeout" value="${timeout}"/>
</bean>]]></programlisting>

        <para>Then the <literal>timeout</literal> property of
        <literal>someBean</literal> will be set using the value of the
        <literal>timeout</literal> entry in the configuration dictionary
        registered under the <literal>com.xyz.myapp</literal> persistent
        id.</para>

        <para>The placeholder strings are evaluated at the time that the bean
        is instantiated. Changes to the properties made via Configuration
        Admin subsequent to the creation of the bean do
        <emphasis>not</emphasis> result in re-injection of property values.
        See the <literal>managed-service</literal> and
        <literal>managed-service-reference</literal> elements documented in
        appendix B if you require this level of integration. The
        <literal>placeholder-prefix</literal> and
        <literal>placeholder-suffix</literal> attributes can be used to change
        the delimiter strings used for placeholder values.</para>

        <para>It is possible to specify a default set of property values to be
        used in the event that the configuration dictionary does not contain
        an entry for a given key. The <literal>defaults-ref</literal>
        attribute can be used to refer to a named bean of
        <literal>Properties</literal> or <interfacename>Map</interfacename> type. Instead
        of referring to an external bean, the
        <literal>default-properties</literal> nested element may be used to
        define an inline set of properties.</para>

        <programlisting><![CDATA[<osgix:property-placeholder persistent-id="com.xyz.myapp">
  <default-properties> 
     <property name="productCategory" value="E792"/>
     <property name="businessUnit" value="811"/> 
  </default-properties>
</osgix:property-placeholder>]]></programlisting>

        <para>The <literal>persistent-id</literal> attribute must refer to the
        persistent-id of an OSGi <interfacename>ManagedService</interfacename>, it is a
        configuration error to specify a factory persistent id referring to a
        <interfacename>ManagedServiceFactory</interfacename>.</para>
      </section>

      <section id="compendium:cm:dict">
        <title>Configuration Dictionaries</title>

        <para>Support for directly accessing configuration objects and their
        associated dictionaries, and for instantiating beans directly from
        configuration objects is on the Spring Dynamic Modules road map. See
        <xref ulink="appendix-roadmap"/> for more information.</para>
      </section>
    </section>
  </appendix>
