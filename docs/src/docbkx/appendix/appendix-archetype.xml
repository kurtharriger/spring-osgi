<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<appendix id="appendix-archetype">
    <title>Spring Dynamic Modules Maven Archetype</title>

    <para>As part of the distribution, Spring-DM provides a Maven <ulink url="http://maven.apache.org/plugins/maven-archetype-plugin/">archetype</ulink>
    which creates the basic structure of a Java project that uses Spring DM, especially useful to new users. To run the archetype (and create the new project),
    simply run the following command line:</para>
   
   <programlisting><![CDATA[mvn archetype:create \
-DarchetypeGroupId=org.springframework.osgi \
-DarchetypeArtifactId=spring-osgi-bundle-archetype \
-DarchetypeVersion=${version}   \
-DgroupId=<your-project-groupId>  \
-DartifactId=<your-project-artifactId> \
-Dversion=<your-project-version> 
   ]]></programlisting>
	
	<note>The command above should be invoked as one line - the <literal>\</literal> is used as a convenience to break the long line into smaller pieces</note>    
    
    <para>The result of the command, is a Maven 2 project that defines a simple bean, configures it using 
    <literal>src/main/resources/META-INF/spring/bundle-context.xml</literal> and <literal>src/main/resources/META-INF/spring/bundle-context-osgi.xml</literal> 
    and provides unit and (out of the OSGi container) integration tests. The project is packaged as an OSGi bundle.</para>
    <para>Notice that by default, the project does not contain a MANIFEST.MF for your project. The Maven infrastructure will generate it, through Apache
    Felix <ulink url="http://felix.apache.org/site/maven-bundle-plugin-bnd.html">bundle plug-in</ulink>. To do that, run the following (from the project root):</para>
    
    <programlisting><![CDATA[mvn package]]></programlisting>
    
    <note>To avoid the confusion between the generated artifacts and maintained files, the manifest file resides under <literal>META-INF</literal> folder
    while Spring configuration files under <literal>src/main/resources/META-INF</literal> directory.</note>
    
    <para>This will compile your project, pack it as a jar and create the OSGi manifest based on your classes under <literal>/META-INF</literal> folder (so
    that users running Eclipse PDE can use it right away. To generate the manifest, without creating the OSGi bundle, simply run: 
    </para>   
    <programlisting><![CDATA[mvn org.apache.felix:maven-bundle-plugin:manifest]]></programlisting>
   
   <section id="archetype:generated-content">
   	<title>Generated Project Features at-a-glance</title>
   	
   	<itemizedlist>
   		<listitem>Packaged as an OSGi bundle</listitem>
   		<listitem><literal>META-INF/MANIFEST.MF</literal> for OSGi bundle automatically generated</listitem>
   		<listitem>Simple bean interface and implementation defined. Interface and implementation types are in different packages, only the interface package 
   		is exported by the bundle.</listitem>
   		<listitem><literal>src/main/resources/META-INF/spring/bundle-context.xml</literal> is a Spring configuration file that defines the simple bean.</listitem>
   		<listitem><literal>src/main/resources/META-INF/spring/bundle-context-osgi.xml</literal> is a spring configuration file ready for you to add bean 
   		definitions from the osgi namespace (services, references etc.)</listitem>
   		<listitem><literal>BeanImplTest</literal> case defined to unit test the simple bean</listitem>
   		<listitem><literal>BeanIntegrationTest</literal> defined to fire up the non-osgi portions of the application context configuration and test 
   		<emphasis>outside</emphasis> of OSGi</listitem>
   		<listitem><literal>BeanOgiIntegrationTest</literal> defined to fire up the osgi portions of the application context configuration and test 
   		<emphasis>inside</emphasis> of OSGi</listitem>
   		<listitem><literal>.project</literal>, <literal>.classpath</literal>, and <literal>build.properties</literal> files created to enable use of this 
   		project directly inside eclipse as a PDE plugin project</listitem>
   	</itemizedlist>
   </section>
</appendix>
