<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

  <chapter id="compendium">
    <title>Compendium Services</title>

    <para>The OSGi Service Platform Service Compendium specification defines a
    number of additional services that may be supported by OSGi
    implementations. Spring Dynamic Modules supports an additional
    "compendium" namespace that provides integration with some of these services.
    By convention, the prefix <literal>osgix</literal> is used for this
    namespace:</para>

	<programlistingco>
		<areaspec>
			<areaset id="compendium:ns:xml:uri.prefix" coords="">
				<area id="compendium:ns:xml:uri.prefix.1" coords="4 93"/>
				<area id="compendium:ns:xml:uri.prefix.2" coords="4 10"/>
			</areaset>
			<area id="compendium:ns:xml:uri" coords="8 95"/>
			<area id="compendium:ns:xml:uri.loc" coords="9 96"/>
		</areaspec>
    	<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/osgi"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xsi:schemaLocation="http://www.springframework.org/schema/osgi  
       	http://www.springframework.org/schema/osgi/spring-osgi.xsd
     http://www.springframework.org/schema/osgi-compendium
       	http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd
     http://www.springframework.org/schema/beans   
       	http://www.springframework.org/schema/beans/spring-beans.xsd">

   <!-- use the OSGi namespace elements directly -->
   <service id="simpleServiceOsgi" ref="simpleService"
       interface="org.xyz.MyService" />

   <!-- qualify compendium namespace elements -->
   <osgix:cm-properties id="cm" persistent-id="com.xyz.myapp"/>

</beans:beans>]]></programlisting>
		<calloutlist>
			<callout arearefs="compendium:ns:xml:uri.prefix">
				<para>Compendium namespace declaration (bound to <literal>osgix</literal> prefix)</para>
			</callout>
			<callout arearefs="compendium:ns:xml:uri">
				<para>Schema location (namespace URI)</para>
			</callout>
			<callout arearefs="compendium:ns:xml:uri.loc">
				<para>XML schema to use for the compendium namespace</para>
			</callout>
		</calloutlist>
	</programlistingco>
	
    <para>At present this namespace provides support for the Configuration
    Admin service. Support for other compendium services may be added in
    future releases.</para>

    <section id="compendium:cm">
      <title>Configuration Admin</title>
	
	  <para>One of the most important compendium services, is the <ulink url="http://www.osgi.org/javadoc/r4v401/org/osgi/service/cm/package-summary.html">Configuration Admin</ulink>
	  which, as a name implies, provides configuration to interested bundles through the OSGi service registry. Spring DM provides dedicated support
	  for Configuration Admin (CM), allowing consumption and injection of the configuration data in a declarative way.</para>
	  
      <section id="compendium:cm:props">
        <title>Exposing Configuration Admin entries as <classname>Properties</classname></title>

        <para>In its simplest form, the CM can be seen as a configuration source, namely a <classname>Dictionary</classname> whose
        keys are always <classname>String</classname>s. Spring DM can expose entries in the CM as a <classname>Properties</classname> object,
        through the <literal>cm-properties</literal> element. A minimal declaration looks as follows:</para>
        
        <programlisting language="xml"><![CDATA[<osgix:cm-properties id="ds.cfg" persistent-id="data.source.office.1"/>]]></programlisting>
        
        <para>The configuration above, exposes the properties available in the CM under <emphasis>data.source.office.1</emphasis> entry as a bean named
        <emphasis>ds.cfg</emphasis>.</para> 
        <note><para>The <literal>persistent-id</literal> attribute must refer to the
        persistent-id of an OSGi <interfacename>ManagedService</interfacename>, it is a
        configuration error to specify a factory persistent id referring to a
        <interfacename>ManagedServiceFactory</interfacename>.</para></note>
        
        <para>Those familiar with Spring's 
        <ulink url="http://static.springframework.org/spring/docs/2.5.x/reference/xsd-config.html#xsd-config-body-schemas-util">util namespace</ulink> will
        fin d<literal><![CDATA[<osgi:cm-properties/>]]></literal> identical with <literal><![CDATA[<util:properties/>]]></literal>.</para>
        
        <para>It is possible to specify a default set of property values to be used in the event that the configuration dictionary does not contain
        an entry for a given key. The declaration is similar to the <literal>props</literal> element inside the Spring beans namespace:</para>
        <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/osgi-compendium"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
   xsi:schemaLocation="
      http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/osgi-compendium 
        http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd">

   <osgix:cm-properties id="cfg.with.defaults" persistent-id="data.source.office.2">
      <beans:prop key="host">localhost</beans:prop>
      <beans:prop key="port">3306</beans:prop>
   </osgix:cm-properties>

</beans:beans>]]></programlisting>

		<para>By default, the properties found in the Configuration Admin entry will override the local properties. Thus, for the previous example, if the 
		<literal>data.source.office.2</literal> configuration contains a <emphasis>host</emphasis> entry, its value will override the locally defined
		<literal>localhost</literal>. For cases where this behaviour is undesired, the attribute <literal>local-override</literal> 
		(default <literal>false</literal>) allows one to revert the merging algorithm, forcing the local properties to override the entries in the CM.</para>
		
		<para>Since <literal>cm-properties</literal> exposes the CM entries as <classname>Properties</classname>, it can be used with Spring's <classname>
		<ulink url="http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#beans-factory-placeholderconfigurer">PropertyPlaceholderConfigurer</ulink></classname> 
		and <classname><ulink url="http://static.springframework.org/spring/docs/2.5.x/reference/beans.html#beans-factory-overrideconfigurer">PropertyOverrideConfigurer</ulink></classname> 
		to externalize and customize environment-specific properties:</para>
	
		<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:osgix="http://www.springframework.org/schema/osgi-compendium"
   xmlns:ctx="http://www.springframework.org/schema/context"
   xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	  http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	  http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/osgi-compendium 
	  http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd">

   <!-- Configuration Admin entry -->
   <osgix:cm-properties id="cmProps" persistent-id="com.xyz.myapp">
      <prop key="host">localhost</prop>
   </osgix:cm-properties>

   <!-- placeholder configurer -->
   <ctx:property-placeholder properties-ref="cmProps" />

   <bean id="dataSource" ...>
      <property name="host" value="${host}"/>
      <property name="timeout" value="${timeout}"/>
   </bean>
	
</beans>]]></programlisting>		 
		
        <para>An important aspect of <literal>cm-properties</literal> is does <emphasis>not</emphasis> reflect
        any that any subsequent changes made to the entry it represents, made through the Configuration Admin API.
        That is, once resolved, the <literal>cm-properties</literal> content remains the same, regardless of any updates
        made the to CM entry it represents.</para>   
      </section>

	  <section id="compendium:cm:managed-properties">
	  	<title>Managed properties</title>
	  	
	  	<para>Based on a configuration admin entry, Spring DM can autowire by name, the properties of a given bean. To use this feature, define
	  	a nested <literal>managed-properties</literal> inside the bean definition:</para>
	  	
	  	<programlisting language="xml"><![CDATA[<bean id="managedComponent" class="MessageTank">
   <osgix:managed-properties persistent-id="com.xyz.messageservice"/> 
</bean>]]></programlisting>

		<para>For each key in the dictionary stored by Configuration Admin under the given persistent id, 
		if the bean type has a property with a matching name (following JavaBeans conventions), 
		then that component property will be dependency injected with the value stored in Configuration Admin under the key. 
		If the definition of <classname>SomeClass</classname> from the example above is as follows:</para>
		<programlisting language="java"><![CDATA[public class MessageTank {
  private int amount;
  public int getAmount() { return this.amount; }
  public void setAmount(int amount) { this.amount = amount; }
}]]></programlisting>
		<para>and the configuration dictionary stored under the pid <literal>com.xyz.messageservice</literal> contains an entry 
		<literal>amount=200</literal>, then the <literal>setAmount</literal> method will be invoked on the bean 
		instance during configuration, passing in the value <literal>200</literal>.</para>
		<para>If a property value is defined both in the configuration dictionary stored in the Configuration Admin service and in a 
		property element declaration nested in the component element, then the value from Configuration Admin takes precedence:</para>
		
		<programlisting language="xml"><![CDATA[<bean id="managedComponent" class="MessageTank">
   <osgix:managed-properties persistent-id="com.xyz.messageservice"/>
   <property name="amount" value="100"/>
   <property name="threshold" value="500"/> 
</bean>]]></programlisting>
		
		<para>Property values specified via property elements can therefore be treated as default values to be used if none is available through 
		Configuration Admin.</para>
		
		<section id="compendium:cm:managed-properties:update">
			<title>Configuration Admin Runtime Updates</title>
			<para>A powerful feature of Configuration Admin is the ability to update (or delete) entries at runtime. That is, the configuration data 
			stored in Configuration Admin may be updated after the bean has been created. By default, any post-creation updates will be ignored. However,
			one can configure <literal>managed-properties</literal> element to receive configuration updates through the <literal>update-strategy</literal>
			attribute, which can have a value of either <literal>bean-managed</literal> or <literal>container-managed</literal>.</para>
		
			<para><literal>bean-managed</literal> strategy will pass all the updates made to the configuration to a callback present on the bean, specified
			through the <literal>update-method</literal> attribute (which becomes required). The update method must have one of the following signatures:</para>
			
			<programlisting language="java"><![CDATA[public void anyMethodName(Map properties)
public void anyMethodName(Map<String,?> properties); // for Java 5]]></programlisting>

		    <para>In contrast, the <literal>container-managed</literal> update strategy will re-inject bean properties by name based on the new properties 
		    received in the update. For <literal>container-managed</literal> updates, the component class must provide setter methods for the component properties 
		    that it wishes to have updated. Consider the following class definitions:</para>
		    
		    <programlisting language="java"><![CDATA[public class ContainerManagedBean {
  // will be reinjected (since it has a setter)
  private Integer integer;
  // will not be reinjected (no setter present)
  private Long waitTime; 
  
  public void setInteger(Integer integer) { this.integer = integer; }
}

public class SelfManagedBean {
  
  // update callback
  public void updateCallback(Map properties) {
	System.out.println("Received properties " + properties);
	System.out.println("Props can be used as a Dictionary " + (Dictionary) properties);
	// do more work ... 
  }
}]]></programlisting>
		    
		    <para>and configuraton:</para>
		    
		    <programlisting language="xml"><![CDATA[<bean id="containerManaged" class="ContainerManagedBean">
	<osgix:managed-service persistent-id="labX" update-strategy="container-managed"/>
	<property name="integer" value="23"/>
</bean>
	
<bean id="beanManaged" class="SelfManagedBean">
	<osgix:managed-service persistent-id="labY" update-strategy="bean-managed" update-method="updateCallback"/>
</bean>]]></programlisting>
		    <para>Any updates made to the CM entry <literal>labX</literal> will be automatically reinjected on existing instances of 
		    <literal>containerManaged</literal> bean while the <literal>labY</literal> updates will be passed to <methodname>updateCallback</methodname>
		    method.</para>
		    
		    <para>The update options are summarized in the table below:</para>
		    <table id="compendium-cm-managed-properties-options" pgwide="1">
          		<title>Managed Properties Update Options</title>
          		<tgroup cols="3">
          		  <colspec colname="c1" colwidth="2*"/>
        		  <colspec colname="c2" colwidth="1*"/>
				  <colspec colname="c3" colwidth="4*"/>
	              <thead>
               	  	<row>
		              <entry><literal>update-strategy</literal></entry>
		              <entry><literal>update-method</literal></entry>
		              <entry>Behaviour</entry>
		   			</row>
	              </thead>
	              <tbody>
	              	<row>
	              	  <entry><literal>container-managed</literal></entry>
	              	  <entry><emphasis>ignored</emphasis></entry>
	              	  <entry>Reinjects the bean properties, using the properties present in the update. The re-injection will be applied while locking (through
	              	  a <literal>synchronized</literal> instruction) the bean instance. If the locking or re-injection strategy is not suitable, consider using
	              	  the <literal>bean-managed</literal> approach.</entry>
	              	</row>
	              	<row>
	              	  <entry><literal>bean-managed</literal></entry>
	              	  <entry><emphasis>required</emphasis></entry>
	              	  <entry>Invokes the <literal>update-method</literal> callback on the bean instance, passing the updated configuration (as a 
	              	  <interfacename>Map</interfacename> object that can be safely cast to a <classname>Dictionary</classname> if needed). No locking is
	              	  performed.</entry>
	              	</row>
	              </tbody>
				</tgroup>
			</table>	          	
		</section>
	  </section>
	  
      <section id="compendium:cm:dict">
        <title>Direct access to configuration data</title>

        <para>The simplest way to work directly with the configuration data stored under a given persistent id or factory persistent id, 
        is to register a service that implements either the <interfacename>ManagedService</interfacename> or <interfacename>ManagedServiceFactory</interfacename>
        interface and specify the pid that you are interested in as a service property (for more information, see the Configuration Admin chapter
        in the OSGi compendium spec). For example:</para>
        
        <programlisting language="xml"><![CDATA[<osgi:service interface="org.osgi.service.cm.ManagedService" ref="myManagedService">
  <osgi:service-properties>
    <entry key="service.pid" value="my.managed.service.pid"/>
  </osgi:service-properties>
</osgi:service>

<bean id="myManagedService" class="com.xyz.MyManagedService"/>]]></programlisting>
      </section>
      
    </section>
  </chapter>